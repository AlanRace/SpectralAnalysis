<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SpectralAnalysis on SpectralAnalysis: Software for the masses</title><link>/</link><description>Recent content in SpectralAnalysis on SpectralAnalysis: Software for the masses</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Parser</title><link>/basic-usage/load-data/parser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/basic-usage/load-data/parser/</guid><description>A parser is something that understands a specific file format and enables the translation and loading of data.
Advanced Currently supported parsers are
ImzMLParser (Mass spectrometry imaging data, .imzML) SIMSParser (SIMS data, .tof or .grd) To create a parser for a currently unsupported file type or style of data, extend the Parser class and add the new class into the same folder.</description></item><item><title>Principal Component Analysis (PCA)</title><link>/basic-usage/multivariate/pca/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/basic-usage/multivariate/pca/</guid><description>Principal component analysis (PCA) is a statistical technique that can be used for data exploration. It is not necessary to understand the details of PCA to be able to successfully use it to find patterns within your data, but they can help interpret how significant such a pattern is. The screenshot below shows SpectralAnalysis&amp;rsquo; interface for exploring PCA results.
Performing PCA There are two methods for performing PCA included within SpectralAnalysis.</description></item><item><title>Scripting - datacube / kmeans</title><link>/tutorials/scripting-workflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/scripting-workflow/</guid><description>This script was originally written by Adam Taylor, Teresa Murta and Alex Dexter and can be used to automatically generate a mean spectrum, detect peaks, reduce the data to the peaks with signal-to-noise greater than 3, perform k-means clustering (k = 2) on the reduced data, generate mean spectra for each cluster and then save out all variables.
This script demonstrates how SpectralAnalysis can be used without the interface to perform more complex and automatable analysis routines.</description></item><item><title>Region of Interest</title><link>/basic-usage/region-of-interest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/basic-usage/region-of-interest/</guid><description>Regions of interest (ROIs) are areas of an image, which can be used as input into subsequent data analysis. ROIs can be defined manually, as explained in this page, or automatically through processing such as clustering.
Feature List Generate ROI Calculate statistics on ROI Export ROIs Overview The ROI panel can be found on the right on the main interface (number 1 in the image below).
Region of interest list Save region of interest list Load region of interest list View statistics on ROI Add/edit/delete ROIs Generate ROI To create an ROI manually, the Edit button on the main interface in the ROI panel must be clicked.</description></item><item><title>Using SpectralAnalysis in python</title><link>/tutorials/using-python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/using-python/</guid><description>Install MATLAB Install Python version 3.7 Install MATLAB Engine for Python import matlab.engine print(&amp;#34;Starting MATLAB Engine. This may take a couple of seconds.&amp;#34;); eng = matlab.engine.start_matlab() print(&amp;#34;MATLAB Engine started.&amp;#34;) # Add SpectralAnalysis to MATLAB path eng.addpath(eng.genpath(r&amp;#34;C:\\Path\\To\\SpectralAnalysis&amp;#34;)) # Add Java libraries to MATLAB path eng.addJARsToClassPath(nargout=0) # Load in the example data using ImzMLParser mouseBrain = eng.ImzMLParser(r&amp;#34;C:\\Path\\To\\SpectralAnalysis\\example-data\\mouse-brain\\MouseBrainCerebellum.imzML&amp;#34;) eng.parse(mouseBrain, nargout=0) # Get the image parameters width = eng.getWidth(mouseBrain) height = eng.getHeight(mouseBrain) # Get the spectrum at position (1, 1) firstSpectrum = eng.</description></item><item><title>Ensure consistent m/z axis</title><link>/basic-usage/ensure-consistent-mz-axis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/basic-usage/ensure-consistent-mz-axis/</guid><description>Background A common method for reducing the size of the data without discarding information when saving mass spectrometry data is to only store data points where the intensity is greater than zero. This can result in the data points in any two spectra containing different m/z values (for example in one spectrum there may be a peak at 798.55 and therefore a corresponding data point, but in the next spectrum this peak was not detected and therefore this value is not present in the spectrum).</description></item><item><title>Spectral Representation</title><link>/basic-usage/spectral-representation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/basic-usage/spectral-representation/</guid><description>A spectral representation is a spectrum which describes one or more pixels. Examples of spectral representations are:
Mean spectrum Total spectrum Basepeak spectrum These are useful as a means to get an overview of peaks present in the entire dataset or a specific region of interest. Spectral representations can be generated by selecting the Spectral Representation option in the menu bar (top of DataViewer window).
Mean spectrum The mean spectrum contains the mean intensity at each spectral channel.</description></item><item><title>Continuous vs Profile</title><link>/basic-usage/load-data/continuous-vs-profile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/basic-usage/load-data/continuous-vs-profile/</guid><description>The continuous and profile terminology are taken from imzML and are therefore primarily used in reference to mass spectrometry imaging data. Despite the nomenculature, continuous data does not necessarily mean that the data points are a continuum and profile data may be used to store peak picked data.
Continuous data points are consistent for all spectra within the dataset. A single, global, array of spectral channels is stored once in the dataset.</description></item><item><title>Data Representation</title><link>/basic-usage/load-data/data-representation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/basic-usage/load-data/data-representation/</guid><description>A data representation is a means of accessing data. Currently two general data representations are implemented DataInMemory and DataOnDisk.
DataInMemory data is loaded into memory on initialisation, resulting in faster processing of data at the cost of RAM.
DataOnDisk only the metadata is loaded into memory, with data being accessed from the disk only when needed. This is slower than DataInMemory but allows processing of datasets much larger than the available RAM.</description></item><item><title>Normalisation</title><link>/basic-usage/preprocessing/normalisation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/basic-usage/preprocessing/normalisation/</guid><description>Background The goal of normalisation is to scale the intensities of each pixel to remove systematic artefacts that affect intensity. For further reading on normalisation methods there are a number of articles that discuss this further
Normalization in MALDI-TOF imaging datasets of proteins: practical considerations Robust data processing and normalization strategy for MALDI mass spectrometric imaging Exploring Ion Suppression in Mass Spectrometry Imaging of a Heterogeneous Tissue Applying a method in SpectralAnalysis Select a spectrum by clicking on a pixel in the image.</description></item></channel></rss>