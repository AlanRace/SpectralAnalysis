<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Load data on SpectralAnalysis: Software for the masses</title><link>/basic-usage/load-data/</link><description>Recent content in Load data on SpectralAnalysis: Software for the masses</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="/basic-usage/load-data/index.xml" rel="self" type="application/rss+xml"/><item><title>Parser</title><link>/basic-usage/load-data/parser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/basic-usage/load-data/parser/</guid><description>A parser is something that understands a specific file format and enables the translation and loading of data. Currently supported data formats are
imzML the open mass spectrometry imaging format (.imzML) Advanced Currently supported parsers are
ImzMLParser (Mass spectrometry imaging data, .imzML) SIMSParser (SIMS data, .tof or .grd) To create a parser for a currently unsupported file type or style of data, extend the Parser class and add the new class into the same folder.</description></item><item><title>Continuous vs Profile</title><link>/basic-usage/load-data/continuous-vs-profile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/basic-usage/load-data/continuous-vs-profile/</guid><description>The continuous and profile terminology are taken from imzML and are therefore primarily used in reference to mass spectrometry imaging data. Despite the nomenculature, continuous data does not necessarily mean that the data points are a continuum and profile data may be used to store peak picked data.
Continuous data points are consistent for all spectra within the dataset. A single, global, array of spectral channels is stored once in the dataset.</description></item><item><title>Data Representation</title><link>/basic-usage/load-data/data-representation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/basic-usage/load-data/data-representation/</guid><description>A data representation is a means of accessing data. Currently two general data representations are implemented DataInMemory and DataOnDisk.
DataInMemory data is loaded into memory on initialisation, resulting in faster processing of data at the cost of RAM.
DataOnDisk only the metadata is loaded into memory, with data being accessed from the disk only when needed. This is slower than DataInMemory but allows processing of datasets much larger than the available RAM.</description></item></channel></rss>